---
title: "Financial data analysis"
author: Damiche Inès
format: html
editor: visual
---


```{r}
#| message: FALSE
here::i_am("dplyr-102.Rproj")
library(here)
library(vroom) #or readdr
library(dplyr)
library(tidyr)
library(ggplot2)

```

# Data loading 
```{r}
#| message: FALSE
clients <-vroom(here("data/client.csv")) #on utilise l'argument locale pour rendre le dataset "international" (ex: point au lieu des virgules)
accounts <-  vroom(here("data/account.csv"))
disp <- vroom(here("data/disp.csv"))
```

# Joining data tables
A collection of joining functions of the form `*_join`

## Inner join 
```{r}
da <- inner_join(accounts, disp) #si y a deux colonnes qui sont pareils dans les deux table alors inner_join les combine, cf le message en rouge qui s'affiche = les deux table sont combinés grâce à la variable account_id
```

```{r}
cda <- inner_join(da, clients) #it makes the join between district_it and clients_id but if the client's account is not in his district_id then the client disappear from the data set 
```

```{r}
#we want to join only by clients_id 
cda <- inner_join(da, clients, by = join_by(client_id), suffix= c("home", "_bank"))
```

## Home district versus bank district 

```{r}
home_diff_bank <- cda |> filter(district_idhome != district_id_bank) |> nrow() #filtering only works to compare columns
```

We observe that `r home_diff_bank` clients live in a different district than their banks.

```{r}
#we want to compare rows so we can't use filtering
cda |> group_by(account_id) |> distinct(district_idhome) |> summarise(N=n()) |> filter(N>1)
```

## Gender gap 
```{r}
clients |> count(gender)
```
```{r}
clients |> ggplot(aes(y=gender)) + geom_bar() + coord_flip()
```


```{r}
cda |> 
  count(gender, type)|> 
  group_by(gender) |>
  mutate(freq= n/sum(n))|>
  select(-n)|>
  pivot_wider(values_from = freq, names_from= type)
```
It seems that there is no gender effect. 

```{r}
cda |>
  ggplot(aes(y = gender, fill=type)) + geom_bar()
```

```{r}
cda |>
  ggplot(aes(y = gender, fill=type)) + geom_bar(position = "fill") #frequency 
```

```{r}
chisq.test(cda |> pull(gender),
           cda |> pull(type))
```




